// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  fullName  String?
  userName  String?
  bio       String?
  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  role RoleEnum @default(MEMBER)

  post  Post[]
  reply Reply[]
  Like  Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id           Int     @id @default(autoincrement())
  content      String?
  image        String?
  likesCount   Int?    @default(0)
  repliesCount Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reply Reply[]
  like  Like[]

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@map("post")
}

model Reply {
  id           Int     @id @default(autoincrement())
  content      String?
  image        String?
  likesCount   Int?    @default(0)
  repliesCount Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@map("reply")
}

model Follow {
  id         Int  @id @default(autoincrement())
  followerId Int
  follower   User @relation("Followers", fields: [followerId], references: [id])

  followingId Int
  following   User @relation("Following", fields: [followingId], references: [id])

  isFollowing Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Like {
  id     Int @id @default(autoincrement())
  userId Int
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  cratedAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("like")
}

enum RoleEnum {
  ADMIN
  MEMBER
}
